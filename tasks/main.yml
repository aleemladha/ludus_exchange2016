---
- name: Ensure domainadmin is part of Enterprise Admins
  win_domain_group_membership:
    name: "Enterprise Admins"
    members:
      - domainadmin
    state: present

- name: Ensure domainadmin is part of Domain Admins
  win_domain_group_membership:
    name: "Domain Admins"
    members:
      - domainadmin
    state: present

- name: Ensure domainadmin has the right membership for exchange server
  win_domain_group_membership:
    name: "Schema Admins"
    members:
      - domainadmin
    state: present

- name: Check if exchange is installed
  win_service:
    name: "MSExchangeFrontendTransport"
  register: exchange_installed

- name: Fail the play if Exchange is already installed
  ansible.builtin.fail:
    msg: "Exchange is already installed have fun"
  when: exchange_installed.exists


- name: Install Windows features
  win_shell: Install-WindowsFeature -Name Server-Media-Foundation,NET-Framework-45-Features,RPC-over-HTTP-proxy,RSAT-Clustering,RSAT-Clustering-CmdInterface,RSAT-Clustering-Mgmt,RSAT-Clustering-PowerShell,WAS-Process-Model,Web-Asp-Net45,Web-Basic-Auth,Web-Client-Auth,Web-Digest-Auth,Web-Dir-Browsing,Web-Dyn-Compression,Web-Http-Errors,Web-Http-Logging,Web-Http-Redirect,Web-Http-Tracing,Web-ISAPI-Ext,Web-ISAPI-Filter,Web-Lgcy-Mgmt-Console,Web-Metabase,Web-Mgmt-Console,Web-Mgmt-Service,Web-Net-Ext45,Web-Request-Monitor,Web-Server,Web-Stat-Compression,Web-Static-Content,Web-Windows-Auth,Web-WMI,Windows-Identity-Foundation,RSAT-ADDS,ADLDS

- name: Enable Windows optional features
  win_shell: Enable-WindowsOptionalFeature -Online -FeatureName IIS-IIS6ManagementCompatibility,IIS-Metabase -All

- name: Install .NET Framework
  win_package:
    path: "{{ exchange_dotnet_install_path }}"
    arguments: /q /norestart
    state: present
  register: dotnet_install

- name: Reboot after installing .NET Framework 4.8
  win_reboot:
  when: dotnet_install.rc == 3010  # 3010 means a reboot is required

- name: Wait for the machine to be up after reboot
  wait_for_connection:
    timeout: 300

- name: Install Visual C++ Redistributable for Visual Studio 2013
  win_package:
    path: "{{ vcredist2013_install_path }}"
    arguments: /q /norestart
    state: present
  register: vcredist2013_install

- name: Reboot after installing Visual C++ Redistributable for Visual Studio 2013
  win_reboot:
  when: vcredist2013_install.changed

- name: The IIS URL Rewrite Module is required with Exchange Server 2016 CU22 and Exchange Server 2019 CU11 or later
  win_package:
    path: "{{ rewrite_module_path }}"
    arguments: /q /norestart
    state: present

- name: Install Unified Communications Managed API 4.0 Runtime.
  win_package:
    path: "{{ ucma_runtime_path }}"
    arguments: /q /norestart
    product_id: UCMA4
    state: present
  register: pri_exchange_ucma_install

- name: reboot after installing Unified Communications Managed API 4.0 Runtime
  win_reboot:
  when: pri_exchange_ucma_install.reboot_required

- name: Wait for the machine to be up after reboot
  wait_for_connection:
    timeout: 300

- name: Install Windows features ADLDS Exchange Transport Hub
  win_shell: Install-WindowsFeature ADLDS

- name: Reboot the system
  win_reboot:
    reboot_timeout: 300

- name: Wait for the machine to be up after reboot
  wait_for_connection:
    timeout: 300

- name: Ensure destination directory exists
  win_file:
    path: "C:\\exchange2016"
    state: directory

- name: Check if Exchange Server ISO exists
  win_stat:
    path: "{{ exchange_iso_path }}"
  register: iso_file_stat

- name: Download Exchange Server ISO
  win_get_url:
    url: "{{ exchange_iso_url }}"
    dest: "{{ exchange_iso_path }}"
  when: not iso_file_stat.stat.exists

- name: Mount Exchange Server ISO
  community.windows.win_disk_image:
    image_path: "{{ exchange_iso_path }}"
    state: present
  register: disk_image_out

- name: Prepare Schema
  ansible.windows.win_shell: |
    & {{ disk_image_out.mount_paths[0] }}Setup.exe /IAcceptExchangeServerLicenseTerms /PrepareSchema
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ ludus_exchange_domain_username }}"
    ansible_become_password: "{{ ludus_exchange_domain_password }}"

- name: Prepare Active Directory
  ansible.windows.win_shell: |
    & {{ disk_image_out.mount_paths[0] }}Setup.exe /IAcceptExchangeServerLicenseTerms /PrepareAD /OrganizationName:"{{ ludus_exchange_domain }}"
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ ludus_exchange_domain_username }}"
    ansible_become_password: "{{ ludus_exchange_domain_password }}"
    #netbios_name: "{{ ludus_exchange_domain }}"

- name: Install Exchange 2016
  ansible.windows.win_shell: |
    & {{ disk_image_out.mount_paths[0] }}Setup.exe /IAcceptExchangeServerLicenseTerms /Mode:Install /Role:Mailbox
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ ludus_exchange_domain_username }}"
    ansible_become_password: "{{ ludus_exchange_domain_password }}"